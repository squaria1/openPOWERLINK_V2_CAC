.TH "C:/Users/Squaria/Documents/openPOWERLINK_V2_CAC/apps/CAC_CN/src/sensor.cpp" 3 "Version 1.2" "CAC main program" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/Users/Squaria/Documents/openPOWERLINK_V2_CAC/apps/CAC_CN/src/sensor.cpp \- Module to read sensor values\&.  

.SH SYNOPSIS
.br
.PP
\fR#include 'sensor\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "int16_t \fBgetAdc_value\fP (int index)"
.br
.RI "function getter of the value of a sensor from the array of sensors\&. "
.ti -1c
.RI "\fBstatusErrDef\fP \fBreadChannels\fP ()"
.br
.RI "function the read the channels of the MCP3008 by opening, reading and closing the sysfs files\&. "
.ti -1c
.RI "\fBstatusErrDef\fP \fBcloseAdc\fP ()"
.br
.RI "function to close the sysfs files of the MCP3008 kernel module\&. "
.ti -1c
.RI "int \fBreadAdc\fP (int \fBfd\fP)"
.br
.RI "function to read the value of a sensor from a sysfs file of the MCP3008 kernel module\&. "
.ti -1c
.RI "int \fBopenAdc\fP (int adc)"
.br
.RI "function to open a sysfs file of the MCP3008 kernel module\&. "
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "static int \fBi\fP = 0"
.br
.RI "the for loops index "
.ti -1c
.RI "static int \fBnum\fP = 0"
.br
.RI "number of modbus register read "
.ti -1c
.RI "static uint8_t \fBtabSensorActivated\fP [\fBMAX_SENSORS\fP]"
.br
.RI "MCP3008 channels activation array\&. "
.ti -1c
.RI "static int \fBfd\fP [\fBMAX_SENSORS\fP]"
.br
.RI "sysfs channel file array "
.ti -1c
.RI "static int16_t \fBvalSensors\fP [\fBMAX_SENSORS\fP]"
.br
.RI "sensor values array "
.ti -1c
.RI "static modbus_t * \fBctx\fP [\fBMAX_SENSORS\fP] = {}"
.br
.RI "modbus instance array "
.ti -1c
.RI "static uint16_t \fBmodbusReg\fP [\fBMODBUS_NBREG\fP]"
.br
.RI "modbus registers read array "
.ti -1c
.RI "static bool \fBrs485Connected\fP [\fBMAX_SENSORS\fP]"
.br
.RI "modbus sensor connexion boolean array, true if a modbus sensor is connected, false otherwise "
.in -1c
.SH "Detailed Description"
.PP 
Module to read sensor values\&. 


.PP
\fBAuthor\fP
.RS 4
Mael Parot, Corentin Berthon 
.RE
.PP
\fBVersion\fP
.RS 4
1\&.2 
.RE
.PP
\fBDate\fP
.RS 4
11/04/2024
.RE
.PP
Contains all functions related to reading sensors values from the sysfs linux module file for an MCP3008 
.PP
Definition in file \fBsensor\&.cpp\fP\&.
.SH "Function Documentation"
.PP 
.SS "\fBstatusErrDef\fP closeAdc ()"

.PP
function to close the sysfs files of the MCP3008 kernel module\&. 
.PP
\fBReturns\fP
.RS 4
statusErrDef that values errCloseAdc when a sysfs file of the MCP3008 fails to close or noError when the function exits successfully\&. 
.br
 
.RE
.PP

.PP
Definition at line \fB239\fP of file \fBsensor\&.cpp\fP\&.
.SS "int16_t getAdc_value (int index)"

.PP
function getter of the value of a sensor from the array of sensors\&. 
.PP
\fBParameters\fP
.RS 4
\fIindex\fP the index of the array of sensors 
.RE
.PP
\fBReturns\fP
.RS 4
the value of the sensor in 2 bytes signed\&. 
.RE
.PP

.PP
Definition at line \fB157\fP of file \fBsensor\&.cpp\fP\&.
.SS "int openAdc (int adc)"

.PP
function to open a sysfs file of the MCP3008 kernel module\&. 
.PP
\fBParameters\fP
.RS 4
\fIadc\fP the MCP3008 channel number 
.RE
.PP
\fBReturns\fP
.RS 4
ADC_READ_ERROR when the file opening fails or the file location\&. 
.RE
.PP

.PP
Definition at line \fB293\fP of file \fBsensor\&.cpp\fP\&.
.SS "int readAdc (int fd)"

.PP
function to read the value of a sensor from a sysfs file of the MCP3008 kernel module\&. 
.PP
\fBParameters\fP
.RS 4
\fIfd\fP the file location 
.RE
.PP
\fBReturns\fP
.RS 4
ADC_READ_ERROR when the file reading fails or the value of a sensor\&. 
.RE
.PP

.PP
Definition at line \fB267\fP of file \fBsensor\&.cpp\fP\&.
.SS "\fBstatusErrDef\fP readChannels ()"

.PP
function the read the channels of the MCP3008 by opening, reading and closing the sysfs files\&. 
.PP
\fBReturns\fP
.RS 4
statusErrDef that values errOpenAdc when a sysfs file of the MCP3008 fails to open or errReadAdc when a sysfs file read of the MCP3008 fails or noError when the function exits successfully\&. 
.RE
.PP

.PP
Definition at line \fB170\fP of file \fBsensor\&.cpp\fP\&.
.SH "Variable Documentation"
.PP 
.SS "modbus_t* ctx[\fBMAX_SENSORS\fP] = {}\fR [static]\fP"

.PP
modbus instance array 
.PP
Definition at line \fB38\fP of file \fBsensor\&.cpp\fP\&.
.SS "int fd[\fBMAX_SENSORS\fP]\fR [static]\fP"

.PP
sysfs channel file array 
.PP
Definition at line \fB29\fP of file \fBsensor\&.cpp\fP\&.
.SS "int i = 0\fR [static]\fP"

.PP
the for loops index 
.PP
Definition at line \fB17\fP of file \fBsensor\&.cpp\fP\&.
.SS "uint16_t modbusReg[\fBMODBUS_NBREG\fP]\fR [static]\fP"

.PP
modbus registers read array 
.PP
Definition at line \fB42\fP of file \fBsensor\&.cpp\fP\&.
.SS "int num = 0\fR [static]\fP"

.PP
number of modbus register read 
.PP
Definition at line \fB21\fP of file \fBsensor\&.cpp\fP\&.
.SS "bool rs485Connected[\fBMAX_SENSORS\fP]\fR [static]\fP"

.PP
modbus sensor connexion boolean array, true if a modbus sensor is connected, false otherwise 
.PP
Definition at line \fB47\fP of file \fBsensor\&.cpp\fP\&.
.SS "uint8_t tabSensorActivated[\fBMAX_SENSORS\fP]\fR [static]\fP"

.PP
MCP3008 channels activation array\&. 
.PP
Definition at line \fB25\fP of file \fBsensor\&.cpp\fP\&.
.SS "int16_t valSensors[\fBMAX_SENSORS\fP]\fR [static]\fP"

.PP
sensor values array 
.PP
Definition at line \fB33\fP of file \fBsensor\&.cpp\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for CAC main program from the source code\&.
