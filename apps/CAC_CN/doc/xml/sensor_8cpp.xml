<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="sensor_8cpp" kind="file" language="C++">
    <compoundname>sensor.cpp</compoundname>
    <includes refid="sensor_8h" local="yes">sensor.h</includes>
    <incdepgraph>
      <node id="9">
        <label>configDefine.h</label>
        <link refid="config_define_8h"/>
      </node>
      <node id="3">
        <label>csv.h</label>
        <link refid="csv_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>eventOpl.h</label>
        <link refid="event_opl_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>nodeId.h</label>
        <link refid="node_id_8h"/>
      </node>
      <node id="11">
        <label>opl.h</label>
        <link refid="opl_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>sensor.h</label>
        <link refid="sensor_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>statusErrorDefine.h</label>
        <link refid="status_error_define_8h"/>
      </node>
      <node id="19">
        <label>valve.h</label>
        <link refid="valve_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>xapOpl.h</label>
        <link refid="xap_opl_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>C:/Users/Squaria/Documents/openPOWERLINK_V2_CAC/apps/CAC_CN/src/sensor.cpp</label>
        <link refid="sensor_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>console/console.h</label>
      </node>
      <node id="25">
        <label>cstdlib</label>
      </node>
      <node id="8">
        <label>ctype.h</label>
      </node>
      <node id="21">
        <label>errno.h</label>
      </node>
      <node id="18">
        <label>eventlog/eventlog.h</label>
      </node>
      <node id="20">
        <label>fcntl.h</label>
      </node>
      <node id="26">
        <label>filesystem</label>
      </node>
      <node id="33">
        <label>getopt/getopt.h</label>
      </node>
      <node id="30">
        <label>inttypes.h</label>
      </node>
      <node id="36">
        <label>io.h</label>
      </node>
      <node id="27">
        <label>iostream</label>
      </node>
      <node id="35">
        <label>limits.h</label>
      </node>
      <node id="34">
        <label>netselect/netselect.h</label>
      </node>
      <node id="32">
        <label>obdcreate/obdcreate.h</label>
      </node>
      <node id="16">
        <label>oplk/debugstr.h</label>
      </node>
      <node id="15">
        <label>oplk/oplk.h</label>
      </node>
      <node id="24">
        <label>signal.h</label>
      </node>
      <node id="29">
        <label>stdbool.h</label>
      </node>
      <node id="28">
        <label>stddef.h</label>
      </node>
      <node id="6">
        <label>stdint.h</label>
      </node>
      <node id="4">
        <label>stdio.h</label>
      </node>
      <node id="5">
        <label>stdlib.h</label>
      </node>
      <node id="7">
        <label>string</label>
      </node>
      <node id="23">
        <label>sys/types.h</label>
      </node>
      <node id="31">
        <label>system/system.h</label>
      </node>
      <node id="22">
        <label>time.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="var">
      <memberdef kind="variable" id="sensor_8cpp_1acb559820d9ca11295b4500f179ef6392" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int i</definition>
        <argsstring></argsstring>
        <name>i</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>the for loops index </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Squaria/Documents/openPOWERLINK_V2_CAC/apps/CAC_CN/src/sensor.cpp" line="17" column="12" bodyfile="C:/Users/Squaria/Documents/openPOWERLINK_V2_CAC/apps/CAC_CN/src/sensor.cpp" bodystart="17" bodyend="-1"/>
        <referencedby refid="classvalve_1a82140bbfd1329eea0100b8359cc9ebc2" compoundref="valve_8cpp" startline="135" endline="164">valve::actionnementValvesInit</referencedby>
        <referencedby refid="opl_8cpp_1a0e626359c6d8f3e0bc7e7c19c01fa820" compoundref="opl_8cpp" startline="139" endline="147">affValeursIn</referencedby>
        <referencedby refid="opl_8cpp_1a7f68cfdc214d014a4d8676853a577e31" compoundref="opl_8cpp" startline="169" endline="177">affValeursOut</referencedby>
        <referencedby refid="opl_8cpp_1a7a60aa76d8b9af7a1930275e02aa2ab5" compoundref="opl_8cpp" startline="154" endline="162">affValeursProcessIn</referencedby>
        <referencedby refid="sensor_8cpp_1abf077aeb27cbf890c5006ed980d1c6f4" compoundref="sensor_8cpp" startline="239" endline="257">closeAdc</referencedby>
        <referencedby refid="classsensor_1ad3b9b11298007378ec5b9127694580af" compoundref="sensor_8cpp" startline="129" endline="148">sensor::extinctSensor</referencedby>
        <referencedby refid="classvalve_1a3db8975d7c2cc46b33fd65e683e8c6df" compoundref="valve_8cpp" startline="431" endline="456">valve::extinctValve</referencedby>
        <referencedby refid="csv_8cpp_1a8a1a11a2771226955ece875f170f2f0c" compoundref="csv_8cpp" startline="550" endline="565">getDependanceVannes</referencedby>
        <referencedby refid="valve_8cpp_1ad4e5b817af0b9501d2a6e6deb0c89445" compoundref="valve_8cpp" startline="483" endline="499">getValvesInitValue</referencedby>
        <referencedby refid="opl_8cpp_1a6928095e76089df62d549c72bf870b44" compoundref="opl_8cpp" startline="706" endline="777">initProcessImage</referencedby>
        <referencedby refid="classsensor_1a136fdef7c492900f3ff9baa211607cb5" compoundref="sensor_8cpp" startline="69" endline="120">sensor::initSensor</referencedby>
        <referencedby refid="classvalve_1a86e16a5cc95d9bec4ee8eec6722760fe" compoundref="valve_8cpp" startline="73" endline="124">valve::initValve</referencedby>
        <referencedby refid="classvalve_1ae69c309265ce0269e0207043fb6b06ca" compoundref="valve_8cpp" startline="319" endline="381">valve::isDependanceActive</referencedby>
        <referencedby refid="opl_8cpp_1a52e9ad149905d67047d527f120a17c11" compoundref="opl_8cpp" startline="600" endline="680">processSync</referencedby>
        <referencedby refid="sensor_8cpp_1a084710571b3a23b14fe1bc00ef626f52" compoundref="sensor_8cpp" startline="170" endline="229">readChannels</referencedby>
        <referencedby refid="csv_8cpp_1a12cdfbd8ea531195d20d46386535a300" compoundref="csv_8cpp" startline="729" endline="741">removeCarriageReturn</referencedby>
        <referencedby refid="csv_8cpp_1a134699cebaabd514d62d43ed18cee67d" compoundref="csv_8cpp" startline="372" endline="408">remplirStructure</referencedby>
        <referencedby refid="valve_8cpp_1ad6ff3dc82333091b53b2fbdc3ef5842e" compoundref="valve_8cpp" startline="525" endline="536">resetTimers</referencedby>
        <referencedby refid="csv_8cpp_1a6b63c44df8b905d77b2c66f1cea86204" compoundref="csv_8cpp" startline="749" endline="758">searchEG</referencedby>
        <referencedby refid="opl_8cpp_1a72f880ddaa32ea28cd0e12658c3e8d67" compoundref="opl_8cpp" startline="229" endline="235">setActivated_Out_CN</referencedby>
        <referencedby refid="opl_8cpp_1aee2f3fe4573dcc68e0ead2380eb83317" compoundref="opl_8cpp" startline="196" endline="210">setValues_Out_CN</referencedby>
        <referencedby refid="valve_8cpp_1add60b51091e6e3c9653ed8400895e3a1" compoundref="valve_8cpp" startline="464" endline="473">setValvesValue</referencedby>
        <referencedby refid="opl_8cpp_1aaf3f45fd8772392506e2cd143b46a455" compoundref="opl_8cpp" startline="907" endline="938">shutdownPowerlink</referencedby>
        <referencedby refid="classvalve_1a1364f1770f8218d7a0077ca2a953371b" compoundref="valve_8cpp" startline="226" endline="298">valve::verifDependanceValves</referencedby>
      </memberdef>
      <memberdef kind="variable" id="sensor_8cpp_1a86cf672daa4e0ad11ad10efc894d19c8" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int num</definition>
        <argsstring></argsstring>
        <name>num</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>number of modbus register read </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Squaria/Documents/openPOWERLINK_V2_CAC/apps/CAC_CN/src/sensor.cpp" line="21" column="12" bodyfile="C:/Users/Squaria/Documents/openPOWERLINK_V2_CAC/apps/CAC_CN/src/sensor.cpp" bodystart="21" bodyend="-1"/>
        <referencedby refid="classsensor_1a136fdef7c492900f3ff9baa211607cb5" compoundref="sensor_8cpp" startline="69" endline="120">sensor::initSensor</referencedby>
        <referencedby refid="sensor_8cpp_1a084710571b3a23b14fe1bc00ef626f52" compoundref="sensor_8cpp" startline="170" endline="229">readChannels</referencedby>
      </memberdef>
      <memberdef kind="variable" id="sensor_8cpp_1a63a90bdf4459f383b471c5b6ddca9f4e" prot="public" static="yes" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t tabSensorActivated[MAX_SENSORS]</definition>
        <argsstring>[MAX_SENSORS]</argsstring>
        <name>tabSensorActivated</name>
        <briefdescription>
<para>MCP3008 channels activation array. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Squaria/Documents/openPOWERLINK_V2_CAC/apps/CAC_CN/src/sensor.cpp" line="25" column="16" bodyfile="C:/Users/Squaria/Documents/openPOWERLINK_V2_CAC/apps/CAC_CN/src/sensor.cpp" bodystart="25" bodyend="-1"/>
        <referencedby refid="classsensor_1a136fdef7c492900f3ff9baa211607cb5" compoundref="sensor_8cpp" startline="69" endline="120">sensor::initSensor</referencedby>
        <referencedby refid="sensor_8cpp_1a084710571b3a23b14fe1bc00ef626f52" compoundref="sensor_8cpp" startline="170" endline="229">readChannels</referencedby>
        <referencedby refid="classsensor_1aeaa38c2a2b5e33314a4fe9ff905dc0c6" compoundref="sensor_8cpp" startline="49" endline="54">sensor::sensor</referencedby>
      </memberdef>
      <memberdef kind="variable" id="sensor_8cpp_1a274d2ff8aab7251a1c26c919ae3694f7" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int fd[MAX_SENSORS]</definition>
        <argsstring>[MAX_SENSORS]</argsstring>
        <name>fd</name>
        <briefdescription>
<para>sysfs channel file array </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Squaria/Documents/openPOWERLINK_V2_CAC/apps/CAC_CN/src/sensor.cpp" line="29" column="12" bodyfile="C:/Users/Squaria/Documents/openPOWERLINK_V2_CAC/apps/CAC_CN/src/sensor.cpp" bodystart="29" bodyend="-1"/>
        <referencedby refid="sensor_8cpp_1abf077aeb27cbf890c5006ed980d1c6f4" compoundref="sensor_8cpp" startline="239" endline="257">closeAdc</referencedby>
        <referencedby refid="sensor_8cpp_1aaee06476c9ddb6ab8457694fdd20cccc" compoundref="sensor_8cpp" startline="293" endline="307">openAdc</referencedby>
        <referencedby refid="sensor_8cpp_1ab4df458eba25efa399c8531f2417d648" compoundref="sensor_8cpp" startline="267" endline="283">readAdc</referencedby>
        <referencedby refid="sensor_8cpp_1a084710571b3a23b14fe1bc00ef626f52" compoundref="sensor_8cpp" startline="170" endline="229">readChannels</referencedby>
      </memberdef>
      <memberdef kind="variable" id="sensor_8cpp_1af1a8dcdbb54fb5c1b49459cde87d1e75" prot="public" static="yes" mutable="no">
        <type>int16_t</type>
        <definition>int16_t valSensors[MAX_SENSORS]</definition>
        <argsstring>[MAX_SENSORS]</argsstring>
        <name>valSensors</name>
        <briefdescription>
<para>sensor values array </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Squaria/Documents/openPOWERLINK_V2_CAC/apps/CAC_CN/src/sensor.cpp" line="33" column="16" bodyfile="C:/Users/Squaria/Documents/openPOWERLINK_V2_CAC/apps/CAC_CN/src/sensor.cpp" bodystart="33" bodyend="-1"/>
        <referencedby refid="sensor_8cpp_1a95ae932c940a8d52f42f256155300708" compoundref="sensor_8cpp" startline="157" endline="159">getAdc_value</referencedby>
        <referencedby refid="classsensor_1a136fdef7c492900f3ff9baa211607cb5" compoundref="sensor_8cpp" startline="69" endline="120">sensor::initSensor</referencedby>
        <referencedby refid="sensor_8cpp_1a084710571b3a23b14fe1bc00ef626f52" compoundref="sensor_8cpp" startline="170" endline="229">readChannels</referencedby>
      </memberdef>
      <memberdef kind="variable" id="sensor_8cpp_1abbcd977f5e414946647edf65cdeb74ce" prot="public" static="yes" mutable="no">
        <type>modbus_t *</type>
        <definition>modbus_t* ctx[MAX_SENSORS]</definition>
        <argsstring>[MAX_SENSORS]</argsstring>
        <name>ctx</name>
        <initializer>= {}</initializer>
        <briefdescription>
<para>modbus instance array </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Squaria/Documents/openPOWERLINK_V2_CAC/apps/CAC_CN/src/sensor.cpp" line="38" column="17" bodyfile="C:/Users/Squaria/Documents/openPOWERLINK_V2_CAC/apps/CAC_CN/src/sensor.cpp" bodystart="38" bodyend="38"/>
        <referencedby refid="classsensor_1ad3b9b11298007378ec5b9127694580af" compoundref="sensor_8cpp" startline="129" endline="148">sensor::extinctSensor</referencedby>
        <referencedby refid="classsensor_1a136fdef7c492900f3ff9baa211607cb5" compoundref="sensor_8cpp" startline="69" endline="120">sensor::initSensor</referencedby>
        <referencedby refid="sensor_8cpp_1a084710571b3a23b14fe1bc00ef626f52" compoundref="sensor_8cpp" startline="170" endline="229">readChannels</referencedby>
      </memberdef>
      <memberdef kind="variable" id="sensor_8cpp_1a00d425c5212b392df244df6c811bf1cd" prot="public" static="yes" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t modbusReg[MODBUS_NBREG]</definition>
        <argsstring>[MODBUS_NBREG]</argsstring>
        <name>modbusReg</name>
        <briefdescription>
<para>modbus registers read array </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Squaria/Documents/openPOWERLINK_V2_CAC/apps/CAC_CN/src/sensor.cpp" line="42" column="17" bodyfile="C:/Users/Squaria/Documents/openPOWERLINK_V2_CAC/apps/CAC_CN/src/sensor.cpp" bodystart="42" bodyend="-1"/>
        <referencedby refid="classsensor_1a136fdef7c492900f3ff9baa211607cb5" compoundref="sensor_8cpp" startline="69" endline="120">sensor::initSensor</referencedby>
        <referencedby refid="sensor_8cpp_1a084710571b3a23b14fe1bc00ef626f52" compoundref="sensor_8cpp" startline="170" endline="229">readChannels</referencedby>
      </memberdef>
      <memberdef kind="variable" id="sensor_8cpp_1a598cc7808ae2f24d9e50a96acbffe018" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool rs485Connected[MAX_SENSORS]</definition>
        <argsstring>[MAX_SENSORS]</argsstring>
        <name>rs485Connected</name>
        <briefdescription>
<para>modbus sensor connexion boolean array, true if a modbus sensor is connected, false otherwise </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Squaria/Documents/openPOWERLINK_V2_CAC/apps/CAC_CN/src/sensor.cpp" line="47" column="13" bodyfile="C:/Users/Squaria/Documents/openPOWERLINK_V2_CAC/apps/CAC_CN/src/sensor.cpp" bodystart="47" bodyend="-1"/>
        <referencedby refid="classsensor_1a136fdef7c492900f3ff9baa211607cb5" compoundref="sensor_8cpp" startline="69" endline="120">sensor::initSensor</referencedby>
        <referencedby refid="sensor_8cpp_1a084710571b3a23b14fe1bc00ef626f52" compoundref="sensor_8cpp" startline="170" endline="229">readChannels</referencedby>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="sensor_8cpp_1a95ae932c940a8d52f42f256155300708" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int16_t</type>
        <definition>int16_t getAdc_value</definition>
        <argsstring>(int index)</argsstring>
        <name>getAdc_value</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>function getter of the value of a sensor from the array of sensors. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the array of sensors </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value of the sensor in 2 bytes signed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Squaria/Documents/openPOWERLINK_V2_CAC/apps/CAC_CN/src/sensor.cpp" line="157" column="9" bodyfile="C:/Users/Squaria/Documents/openPOWERLINK_V2_CAC/apps/CAC_CN/src/sensor.cpp" bodystart="157" bodyend="159"/>
        <references refid="sensor_8cpp_1af1a8dcdbb54fb5c1b49459cde87d1e75" compoundref="sensor_8cpp" startline="33">valSensors</references>
        <referencedby refid="opl_8cpp_1aee2f3fe4573dcc68e0ead2380eb83317" compoundref="opl_8cpp" startline="196" endline="210">setValues_Out_CN</referencedby>
      </memberdef>
      <memberdef kind="function" id="sensor_8cpp_1a084710571b3a23b14fe1bc00ef626f52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="status_error_define_8h_1adf0c44f8de9b8e78b0e56caacfa1ac94" kindref="member">statusErrDef</ref></type>
        <definition>statusErrDef readChannels</definition>
        <argsstring>()</argsstring>
        <name>readChannels</name>
        <briefdescription>
<para>function the read the channels of the MCP3008 by opening, reading and closing the sysfs files. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>statusErrDef that values errOpenAdc when a sysfs file of the MCP3008 fails to open or errReadAdc when a sysfs file read of the MCP3008 fails or noError when the function exits successfully. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Squaria/Documents/openPOWERLINK_V2_CAC/apps/CAC_CN/src/sensor.cpp" line="170" column="14" bodyfile="C:/Users/Squaria/Documents/openPOWERLINK_V2_CAC/apps/CAC_CN/src/sensor.cpp" bodystart="170" bodyend="229"/>
        <references refid="config_define_8h_1a8538e713d830bd0982bbc0e185db5d05" compoundref="config_define_8h" startline="80">ADC_READ_ERROR</references>
        <references refid="sensor_8cpp_1abf077aeb27cbf890c5006ed980d1c6f4" compoundref="sensor_8cpp" startline="239" endline="257">closeAdc</references>
        <references refid="sensor_8cpp_1abbcd977f5e414946647edf65cdeb74ce" compoundref="sensor_8cpp" startline="38" endline="38">ctx</references>
        <references refid="status_error_define_8h_1adf0c44f8de9b8e78b0e56caacfa1ac94abb3be0d1d4505ac1644533c725c8652d" compoundref="status_error_define_8h" startline="107">errOpenAdc</references>
        <references refid="status_error_define_8h_1adf0c44f8de9b8e78b0e56caacfa1ac94a853bb660c03c4d6dbdf70e139b46600d" compoundref="status_error_define_8h" startline="108">errReadAdc</references>
        <references refid="sensor_8cpp_1a274d2ff8aab7251a1c26c919ae3694f7" compoundref="sensor_8cpp" startline="29">fd</references>
        <references refid="csv_8cpp_1a1a782f9afa439eff3d3e807e2149de16" compoundref="csv_8cpp" startline="632" endline="635">getModbusStartAddress</references>
        <references refid="csv_8cpp_1aef9ab8154afc84c92aa1ad1875286257" compoundref="csv_8cpp" startline="608" endline="611">getSensorType</references>
        <references refid="sensor_8cpp_1acb559820d9ca11295b4500f179ef6392" compoundref="sensor_8cpp" startline="17">i</references>
        <references refid="config_define_8h_1aec2426c8f9412cf841cdfd2a4b88a783" compoundref="config_define_8h" startline="76">MAX_ADC</references>
        <references refid="config_define_8h_1aa3d1fc2927eec213e6b5f9e854c392d2" compoundref="config_define_8h" startline="72">MAX_SENSORS</references>
        <references refid="config_define_8h_1afa578deb5cc34a8d1a2c27d959ba68bf" compoundref="config_define_8h" startline="68">MODBUS_NBREG</references>
        <references refid="sensor_8cpp_1a00d425c5212b392df244df6c811bf1cd" compoundref="sensor_8cpp" startline="42">modbusReg</references>
        <references refid="status_error_define_8h_1adf0c44f8de9b8e78b0e56caacfa1ac94ab22416d928134d1c6c7b2e8d2c31f20b" compoundref="status_error_define_8h" startline="22">noError</references>
        <references refid="sensor_8cpp_1a86cf672daa4e0ad11ad10efc894d19c8" compoundref="sensor_8cpp" startline="21">num</references>
        <references refid="sensor_8cpp_1aaee06476c9ddb6ab8457694fdd20cccc" compoundref="sensor_8cpp" startline="293" endline="307">openAdc</references>
        <references refid="sensor_8cpp_1ab4df458eba25efa399c8531f2417d648" compoundref="sensor_8cpp" startline="267" endline="283">readAdc</references>
        <references refid="sensor_8cpp_1a598cc7808ae2f24d9e50a96acbffe018" compoundref="sensor_8cpp" startline="47">rs485Connected</references>
        <references refid="sensor_8cpp_1a63a90bdf4459f383b471c5b6ddca9f4e" compoundref="sensor_8cpp" startline="25">tabSensorActivated</references>
        <references refid="sensor_8cpp_1af1a8dcdbb54fb5c1b49459cde87d1e75" compoundref="sensor_8cpp" startline="33">valSensors</references>
        <referencedby refid="classsensor_1a136fdef7c492900f3ff9baa211607cb5" compoundref="sensor_8cpp" startline="69" endline="120">sensor::initSensor</referencedby>
        <referencedby refid="opl_8cpp_1a52e9ad149905d67047d527f120a17c11" compoundref="opl_8cpp" startline="600" endline="680">processSync</referencedby>
      </memberdef>
      <memberdef kind="function" id="sensor_8cpp_1abf077aeb27cbf890c5006ed980d1c6f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="status_error_define_8h_1adf0c44f8de9b8e78b0e56caacfa1ac94" kindref="member">statusErrDef</ref></type>
        <definition>statusErrDef closeAdc</definition>
        <argsstring>()</argsstring>
        <name>closeAdc</name>
        <briefdescription>
<para>function to close the sysfs files of the MCP3008 kernel module. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>statusErrDef that values errCloseAdc when a sysfs file of the MCP3008 fails to close or noError when the function exits successfully. <linebreak/>
 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Squaria/Documents/openPOWERLINK_V2_CAC/apps/CAC_CN/src/sensor.cpp" line="239" column="14" bodyfile="C:/Users/Squaria/Documents/openPOWERLINK_V2_CAC/apps/CAC_CN/src/sensor.cpp" bodystart="239" bodyend="257"/>
        <references refid="status_error_define_8h_1adf0c44f8de9b8e78b0e56caacfa1ac94a282120158405e4a34ce8e365c3684fb8" compoundref="status_error_define_8h" startline="109">errCloseAdc</references>
        <references refid="sensor_8cpp_1a274d2ff8aab7251a1c26c919ae3694f7" compoundref="sensor_8cpp" startline="29">fd</references>
        <references refid="sensor_8cpp_1acb559820d9ca11295b4500f179ef6392" compoundref="sensor_8cpp" startline="17">i</references>
        <references refid="config_define_8h_1aec2426c8f9412cf841cdfd2a4b88a783" compoundref="config_define_8h" startline="76">MAX_ADC</references>
        <references refid="status_error_define_8h_1adf0c44f8de9b8e78b0e56caacfa1ac94ab22416d928134d1c6c7b2e8d2c31f20b" compoundref="status_error_define_8h" startline="22">noError</references>
        <referencedby refid="classsensor_1ad3b9b11298007378ec5b9127694580af" compoundref="sensor_8cpp" startline="129" endline="148">sensor::extinctSensor</referencedby>
        <referencedby refid="sensor_8cpp_1a084710571b3a23b14fe1bc00ef626f52" compoundref="sensor_8cpp" startline="170" endline="229">readChannels</referencedby>
      </memberdef>
      <memberdef kind="function" id="sensor_8cpp_1ab4df458eba25efa399c8531f2417d648" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int readAdc</definition>
        <argsstring>(int fd)</argsstring>
        <name>readAdc</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <briefdescription>
<para>function to read the value of a sensor from a sysfs file of the MCP3008 kernel module. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>the file location </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ADC_READ_ERROR when the file reading fails or the value of a sensor. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Squaria/Documents/openPOWERLINK_V2_CAC/apps/CAC_CN/src/sensor.cpp" line="267" column="5" bodyfile="C:/Users/Squaria/Documents/openPOWERLINK_V2_CAC/apps/CAC_CN/src/sensor.cpp" bodystart="267" bodyend="283"/>
        <references refid="config_define_8h_1a8538e713d830bd0982bbc0e185db5d05" compoundref="config_define_8h" startline="80">ADC_READ_ERROR</references>
        <references refid="sensor_8cpp_1a274d2ff8aab7251a1c26c919ae3694f7" compoundref="sensor_8cpp" startline="29">fd</references>
        <referencedby refid="sensor_8cpp_1a084710571b3a23b14fe1bc00ef626f52" compoundref="sensor_8cpp" startline="170" endline="229">readChannels</referencedby>
      </memberdef>
      <memberdef kind="function" id="sensor_8cpp_1aaee06476c9ddb6ab8457694fdd20cccc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int openAdc</definition>
        <argsstring>(int adc)</argsstring>
        <name>openAdc</name>
        <param>
          <type>int</type>
          <declname>adc</declname>
        </param>
        <briefdescription>
<para>function to open a sysfs file of the MCP3008 kernel module. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>adc</parametername>
</parameternamelist>
<parameterdescription>
<para>the MCP3008 channel number </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ADC_READ_ERROR when the file opening fails or the file location. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Squaria/Documents/openPOWERLINK_V2_CAC/apps/CAC_CN/src/sensor.cpp" line="293" column="5" bodyfile="C:/Users/Squaria/Documents/openPOWERLINK_V2_CAC/apps/CAC_CN/src/sensor.cpp" bodystart="293" bodyend="307"/>
        <references refid="config_define_8h_1a8538e713d830bd0982bbc0e185db5d05" compoundref="config_define_8h" startline="80">ADC_READ_ERROR</references>
        <references refid="sensor_8cpp_1a274d2ff8aab7251a1c26c919ae3694f7" compoundref="sensor_8cpp" startline="29">fd</references>
        <references refid="config_define_8h_1a2e79cb96de76e27ba54960b579c9f530" compoundref="config_define_8h" startline="60">IIOSYSPATH</references>
        <referencedby refid="sensor_8cpp_1a084710571b3a23b14fe1bc00ef626f52" compoundref="sensor_8cpp" startline="170" endline="229">readChannels</referencedby>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Module to read sensor values. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Mael Parot, Corentin Berthon </para>
</simplesect>
<simplesect kind="version"><para>1.2 </para>
</simplesect>
<simplesect kind="date"><para>11/04/2024</para>
</simplesect>
Contains all functions related to reading sensors values from the sysfs linux module file for an MCP3008 </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="sensor_8h" kindref="compound">sensor.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="17" refid="sensor_8cpp_1acb559820d9ca11295b4500f179ef6392" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="sensor_8cpp_1acb559820d9ca11295b4500f179ef6392" kindref="member">i</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="21" refid="sensor_8cpp_1a86cf672daa4e0ad11ad10efc894d19c8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="sensor_8cpp_1a86cf672daa4e0ad11ad10efc894d19c8" kindref="member">num</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="25" refid="sensor_8cpp_1a63a90bdf4459f383b471c5b6ddca9f4e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="sensor_8cpp_1a63a90bdf4459f383b471c5b6ddca9f4e" kindref="member">tabSensorActivated</ref>[<ref refid="config_define_8h_1aa3d1fc2927eec213e6b5f9e854c392d2" kindref="member">MAX_SENSORS</ref>];</highlight></codeline>
<codeline lineno="29" refid="sensor_8cpp_1a274d2ff8aab7251a1c26c919ae3694f7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="sensor_8cpp_1a274d2ff8aab7251a1c26c919ae3694f7" kindref="member">fd</ref>[<ref refid="config_define_8h_1aa3d1fc2927eec213e6b5f9e854c392d2" kindref="member">MAX_SENSORS</ref>];</highlight></codeline>
<codeline lineno="33" refid="sensor_8cpp_1af1a8dcdbb54fb5c1b49459cde87d1e75" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>int16_t<sp/><ref refid="sensor_8cpp_1af1a8dcdbb54fb5c1b49459cde87d1e75" kindref="member">valSensors</ref>[<ref refid="config_define_8h_1aa3d1fc2927eec213e6b5f9e854c392d2" kindref="member">MAX_SENSORS</ref>];</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="sensor_8cpp_1abbcd977f5e414946647edf65cdeb74ce" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>modbus_t*<sp/><ref refid="sensor_8cpp_1abbcd977f5e414946647edf65cdeb74ce" kindref="member">ctx</ref>[<ref refid="config_define_8h_1aa3d1fc2927eec213e6b5f9e854c392d2" kindref="member">MAX_SENSORS</ref>]<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="42" refid="sensor_8cpp_1a00d425c5212b392df244df6c811bf1cd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint16_t<sp/><ref refid="sensor_8cpp_1a00d425c5212b392df244df6c811bf1cd" kindref="member">modbusReg</ref>[<ref refid="config_define_8h_1afa578deb5cc34a8d1a2c27d959ba68bf" kindref="member">MODBUS_NBREG</ref>];<sp/></highlight><highlight class="comment">//<sp/>will<sp/>store<sp/>read<sp/>registers<sp/>values</highlight></codeline>
<codeline lineno="47" refid="sensor_8cpp_1a598cc7808ae2f24d9e50a96acbffe018" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="sensor_8cpp_1a598cc7808ae2f24d9e50a96acbffe018" kindref="member">rs485Connected</ref>[<ref refid="config_define_8h_1aa3d1fc2927eec213e6b5f9e854c392d2" kindref="member">MAX_SENSORS</ref>];</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="classsensor_1aeaa38c2a2b5e33314a4fe9ff905dc0c6" refkind="member"><highlight class="normal"><ref refid="classsensor_1aeaa38c2a2b5e33314a4fe9ff905dc0c6" kindref="member">sensor::sensor</ref>()</highlight></codeline>
<codeline lineno="50"><highlight class="normal">{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//initialize<sp/>the<sp/>tabSensorActivated<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(<ref refid="sensor_8cpp_1a63a90bdf4459f383b471c5b6ddca9f4e" kindref="member">tabSensorActivated</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="sensor_8cpp_1a63a90bdf4459f383b471c5b6ddca9f4e" kindref="member">tabSensorActivated</ref>));</highlight></codeline>
<codeline lineno="54"><highlight class="normal">}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="classsensor_1a9252346748c0bd090109ee5bcf45f13a" refkind="member"><highlight class="normal"><ref refid="classsensor_1a9252346748c0bd090109ee5bcf45f13a" kindref="member">sensor::~sensor</ref>()</highlight></codeline>
<codeline lineno="57"><highlight class="normal">{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//destructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="classsensor_1a136fdef7c492900f3ff9baa211607cb5" refkind="member"><highlight class="normal"><ref refid="status_error_define_8h_1adf0c44f8de9b8e78b0e56caacfa1ac94" kindref="member">statusErrDef</ref><sp/><ref refid="classsensor_1a136fdef7c492900f3ff9baa211607cb5" kindref="member">sensor::initSensor</ref>()<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="status_error_define_8h_1adf0c44f8de9b8e78b0e56caacfa1ac94" kindref="member">statusErrDef</ref><sp/>res<sp/>=<sp/><ref refid="status_error_define_8h_1adf0c44f8de9b8e78b0e56caacfa1ac94ab22416d928134d1c6c7b2e8d2c31f20b" kindref="member">noError</ref>;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>(TARGET_SYSTEM<sp/>==<sp/>_WIN32_)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="sensor_8cpp_1acb559820d9ca11295b4500f179ef6392" kindref="member">i</ref><sp/>=<sp/>0;<sp/><ref refid="sensor_8cpp_1acb559820d9ca11295b4500f179ef6392" kindref="member">i</ref><sp/>&lt;<sp/><ref refid="config_define_8h_1aa3d1fc2927eec213e6b5f9e854c392d2" kindref="member">MAX_SENSORS</ref>;<sp/><ref refid="sensor_8cpp_1acb559820d9ca11295b4500f179ef6392" kindref="member">i</ref>++)</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<ref refid="csv_8cpp_1aef9ab8154afc84c92aa1ad1875286257" kindref="member">getSensorType</ref>(<ref refid="sensor_8cpp_1acb559820d9ca11295b4500f179ef6392" kindref="member">i</ref><sp/>+<sp/>1))</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:<sp/></highlight><highlight class="comment">//<sp/>1<sp/>if<sp/>the<sp/>sensor<sp/>is<sp/>one<sp/>of<sp/>the<sp/>MCP3008<sp/>channels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//copy<sp/>the<sp/>activation<sp/>from<sp/>the<sp/>&apos;activation.csv&apos;<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sensor_8cpp_1a63a90bdf4459f383b471c5b6ddca9f4e" kindref="member">tabSensorActivated</ref>[<ref refid="sensor_8cpp_1acb559820d9ca11295b4500f179ef6392" kindref="member">i</ref>]<sp/>=<sp/><ref refid="csv_8cpp_1a59b3cd375160ea778a774e62c7c64f7d" kindref="member">getActivation</ref>(<ref refid="sensor_8cpp_1acb559820d9ca11295b4500f179ef6392" kindref="member">i</ref><sp/>+<sp/><ref refid="opl_8cpp_1afbb7865bc950120040f337a3631fc921" kindref="member">nbValuesCN_Out_ByCN</ref><sp/>+<sp/><ref refid="opl_8cpp_1a8dd1817cec0b1c38e0b7eb2470855b25" kindref="member">nbValuesCN_Out</ref><sp/>/<sp/>2<sp/>+<sp/>2);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:<sp/></highlight><highlight class="comment">//<sp/>2<sp/>if<sp/>the<sp/>sensor<sp/>is<sp/>connected<sp/>the<sp/>the<sp/>rs485<sp/>modbus<sp/>serial<sp/>link</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//create<sp/>a<sp/>modbus<sp/>serial<sp/>instance<sp/>for<sp/>this<sp/>sensor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sensor_8cpp_1abbcd977f5e414946647edf65cdeb74ce" kindref="member">ctx</ref>[<ref refid="sensor_8cpp_1acb559820d9ca11295b4500f179ef6392" kindref="member">i</ref>]<sp/>=<sp/>modbus_new_rtu(<ref refid="config_define_8h_1a60a00eebde352da82280909d3b60a2e7" kindref="member">MODBUS_DEVICELOC</ref>,<sp/><ref refid="csv_8cpp_1a2029326f9ecfe8df759544bfbcdd93b9" kindref="member">getModbusBaudRate</ref>(<ref refid="sensor_8cpp_1acb559820d9ca11295b4500f179ef6392" kindref="member">i</ref>+1),<sp/></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="csv_8cpp_1aa6a5195ce6685aec2a8e126bc67118e8" kindref="member">getModbusParity</ref>(<ref refid="sensor_8cpp_1acb559820d9ca11295b4500f179ef6392" kindref="member">i</ref>+1),<sp/><ref refid="csv_8cpp_1aefc2a7d71cf262dae1961f894ad59250" kindref="member">getModbusDataBits</ref>(<ref refid="sensor_8cpp_1acb559820d9ca11295b4500f179ef6392" kindref="member">i</ref>+1),<sp/><ref refid="csv_8cpp_1a7db02ded3c19f89ba4b3cde6585fd7e4" kindref="member">getModbusStopBit</ref>(<ref refid="sensor_8cpp_1acb559820d9ca11295b4500f179ef6392" kindref="member">i</ref>+1));</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="sensor_8cpp_1abbcd977f5e414946647edf65cdeb74ce" kindref="member">ctx</ref>[<ref refid="sensor_8cpp_1acb559820d9ca11295b4500f179ef6392" kindref="member">i</ref>])<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>create<sp/>the<sp/>context:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>modbus_strerror(errno));</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(modbus_connect(<ref refid="sensor_8cpp_1abbcd977f5e414946647edf65cdeb74ce" kindref="member">ctx</ref>[<ref refid="sensor_8cpp_1acb559820d9ca11295b4500f179ef6392" kindref="member">i</ref>])<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>connect:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>modbus_strerror(errno));</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>modbus_free(<ref refid="sensor_8cpp_1abbcd977f5e414946647edf65cdeb74ce" kindref="member">ctx</ref>[<ref refid="sensor_8cpp_1acb559820d9ca11295b4500f179ef6392" kindref="member">i</ref>]);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//set<sp/>the<sp/>address<sp/>of<sp/>the<sp/>slave<sp/>(the<sp/>sensor)<sp/>to<sp/>the<sp/>modbus<sp/>instance<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>modbus_set_slave(<ref refid="sensor_8cpp_1abbcd977f5e414946647edf65cdeb74ce" kindref="member">ctx</ref>[<ref refid="sensor_8cpp_1acb559820d9ca11295b4500f179ef6392" kindref="member">i</ref>],<sp/><ref refid="csv_8cpp_1af50249c502d41696db81f66102243725" kindref="member">getModbusAddrRemoteSlave</ref>(<ref refid="sensor_8cpp_1acb559820d9ca11295b4500f179ef6392" kindref="member">i</ref>+1));</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//test<sp/>if<sp/>we<sp/>can<sp/>read<sp/>from<sp/>the<sp/>sensor<sp/>(if<sp/>a<sp/>sensor<sp/>is<sp/>connected)<sp/>if<sp/>not<sp/>we<sp/>disable<sp/>the<sp/>reading</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//in<sp/>readChannels<sp/>to<sp/>avoid<sp/>slowing<sp/>down<sp/>the<sp/>program</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sensor_8cpp_1a86cf672daa4e0ad11ad10efc894d19c8" kindref="member">num</ref><sp/>=<sp/>modbus_read_registers(<ref refid="sensor_8cpp_1abbcd977f5e414946647edf65cdeb74ce" kindref="member">ctx</ref>[<ref refid="sensor_8cpp_1acb559820d9ca11295b4500f179ef6392" kindref="member">i</ref>],<sp/><ref refid="csv_8cpp_1a1a782f9afa439eff3d3e807e2149de16" kindref="member">getModbusStartAddress</ref>(<ref refid="sensor_8cpp_1acb559820d9ca11295b4500f179ef6392" kindref="member">i</ref><sp/>+<sp/>1),<sp/><ref refid="config_define_8h_1afa578deb5cc34a8d1a2c27d959ba68bf" kindref="member">MODBUS_NBREG</ref>,<sp/><ref refid="sensor_8cpp_1a00d425c5212b392df244df6c811bf1cd" kindref="member">modbusReg</ref>);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="sensor_8cpp_1a86cf672daa4e0ad11ad10efc894d19c8" kindref="member">num</ref><sp/>!=<sp/>1)</highlight><highlight class="comment">//<sp/>number<sp/>of<sp/>read<sp/>registers<sp/>is<sp/>not<sp/>the<sp/>one<sp/>expected</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>read:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>modbus_strerror(errno));</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sensor_8cpp_1a598cc7808ae2f24d9e50a96acbffe018" kindref="member">rs485Connected</ref>[<ref refid="sensor_8cpp_1acb559820d9ca11295b4500f179ef6392" kindref="member">i</ref>]<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Modbus<sp/>read<sp/>registers<sp/>success!<sp/>\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sensor_8cpp_1af1a8dcdbb54fb5c1b49459cde87d1e75" kindref="member">valSensors</ref>[<ref refid="sensor_8cpp_1acb559820d9ca11295b4500f179ef6392" kindref="member">i</ref>]<sp/>=<sp/><ref refid="sensor_8cpp_1a00d425c5212b392df244df6c811bf1cd" kindref="member">modbusReg</ref>[0];</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sensor_8cpp_1a598cc7808ae2f24d9e50a96acbffe018" kindref="member">rs485Connected</ref>[<ref refid="sensor_8cpp_1acb559820d9ca11295b4500f179ef6392" kindref="member">i</ref>]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//test<sp/>if<sp/>we<sp/>can<sp/>read<sp/>channels<sp/>correctly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="sensor_8h_1a084710571b3a23b14fe1bc00ef626f52" kindref="member">readChannels</ref>();</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/><ref refid="status_error_define_8h_1adf0c44f8de9b8e78b0e56caacfa1ac94ab22416d928134d1c6c7b2e8d2c31f20b" kindref="member">noError</ref>)</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="129" refid="classsensor_1ad3b9b11298007378ec5b9127694580af" refkind="member"><highlight class="normal"><ref refid="status_error_define_8h_1adf0c44f8de9b8e78b0e56caacfa1ac94" kindref="member">statusErrDef</ref><sp/><ref refid="classsensor_1ad3b9b11298007378ec5b9127694580af" kindref="member">sensor::extinctSensor</ref>()<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="status_error_define_8h_1adf0c44f8de9b8e78b0e56caacfa1ac94" kindref="member">statusErrDef</ref><sp/>res<sp/>=<sp/><ref refid="status_error_define_8h_1adf0c44f8de9b8e78b0e56caacfa1ac94ab22416d928134d1c6c7b2e8d2c31f20b" kindref="member">noError</ref>;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sensor_8h_1abf077aeb27cbf890c5006ed980d1c6f4" kindref="member">closeAdc</ref>();</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(TARGET_SYSTEM<sp/>==<sp/>_WIN32_)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="sensor_8cpp_1acb559820d9ca11295b4500f179ef6392" kindref="member">i</ref><sp/>=<sp/>0;<sp/><ref refid="sensor_8cpp_1acb559820d9ca11295b4500f179ef6392" kindref="member">i</ref><sp/>&lt;<sp/><ref refid="config_define_8h_1aa3d1fc2927eec213e6b5f9e854c392d2" kindref="member">MAX_SENSORS</ref>;<sp/><ref refid="sensor_8cpp_1acb559820d9ca11295b4500f179ef6392" kindref="member">i</ref>++)</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="csv_8cpp_1aef9ab8154afc84c92aa1ad1875286257" kindref="member">getSensorType</ref>(<ref refid="sensor_8cpp_1acb559820d9ca11295b4500f179ef6392" kindref="member">i</ref><sp/>+<sp/>1)<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>modbus_close(<ref refid="sensor_8cpp_1abbcd977f5e414946647edf65cdeb74ce" kindref="member">ctx</ref>[<ref refid="sensor_8cpp_1acb559820d9ca11295b4500f179ef6392" kindref="member">i</ref>]);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//free<sp/>the<sp/>modbus<sp/>instances<sp/>from<sp/>the<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>modbus_free(<ref refid="sensor_8cpp_1abbcd977f5e414946647edf65cdeb74ce" kindref="member">ctx</ref>[<ref refid="sensor_8cpp_1acb559820d9ca11295b4500f179ef6392" kindref="member">i</ref>]);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="148"><highlight class="normal">}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="157" refid="sensor_8cpp_1a95ae932c940a8d52f42f256155300708" refkind="member"><highlight class="normal">int16_t<sp/><ref refid="sensor_8cpp_1a95ae932c940a8d52f42f256155300708" kindref="member">getAdc_value</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="sensor_8cpp_1af1a8dcdbb54fb5c1b49459cde87d1e75" kindref="member">valSensors</ref>[index];</highlight></codeline>
<codeline lineno="159"><highlight class="normal">}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="170" refid="sensor_8cpp_1a084710571b3a23b14fe1bc00ef626f52" refkind="member"><highlight class="normal"><ref refid="status_error_define_8h_1adf0c44f8de9b8e78b0e56caacfa1ac94" kindref="member">statusErrDef</ref><sp/><ref refid="sensor_8cpp_1a084710571b3a23b14fe1bc00ef626f52" kindref="member">readChannels</ref>()</highlight></codeline>
<codeline lineno="171"><highlight class="normal">{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="status_error_define_8h_1adf0c44f8de9b8e78b0e56caacfa1ac94" kindref="member">statusErrDef</ref><sp/>res<sp/>=<sp/><ref refid="status_error_define_8h_1adf0c44f8de9b8e78b0e56caacfa1ac94ab22416d928134d1c6c7b2e8d2c31f20b" kindref="member">noError</ref>;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(<ref refid="sensor_8cpp_1a274d2ff8aab7251a1c26c919ae3694f7" kindref="member">fd</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="sensor_8cpp_1a274d2ff8aab7251a1c26c919ae3694f7" kindref="member">fd</ref>));</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(<ref refid="sensor_8cpp_1af1a8dcdbb54fb5c1b49459cde87d1e75" kindref="member">valSensors</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="sensor_8cpp_1af1a8dcdbb54fb5c1b49459cde87d1e75" kindref="member">valSensors</ref>));</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//we<sp/>open<sp/>the<sp/>sysfs<sp/>files<sp/>of<sp/>the<sp/>MCP3008<sp/>channels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="sensor_8cpp_1acb559820d9ca11295b4500f179ef6392" kindref="member">i</ref><sp/>=<sp/>0;<sp/><ref refid="sensor_8cpp_1acb559820d9ca11295b4500f179ef6392" kindref="member">i</ref><sp/>&lt;<sp/><ref refid="config_define_8h_1aec2426c8f9412cf841cdfd2a4b88a783" kindref="member">MAX_ADC</ref>;<sp/><ref refid="sensor_8cpp_1acb559820d9ca11295b4500f179ef6392" kindref="member">i</ref>++)<sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="sensor_8cpp_1a63a90bdf4459f383b471c5b6ddca9f4e" kindref="member">tabSensorActivated</ref>[<ref refid="sensor_8cpp_1acb559820d9ca11295b4500f179ef6392" kindref="member">i</ref>])<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sensor_8cpp_1a274d2ff8aab7251a1c26c919ae3694f7" kindref="member">fd</ref>[<ref refid="sensor_8cpp_1acb559820d9ca11295b4500f179ef6392" kindref="member">i</ref>]<sp/>=<sp/><ref refid="sensor_8cpp_1aaee06476c9ddb6ab8457694fdd20cccc" kindref="member">openAdc</ref>(<ref refid="sensor_8cpp_1acb559820d9ca11295b4500f179ef6392" kindref="member">i</ref>);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="sensor_8cpp_1a274d2ff8aab7251a1c26c919ae3694f7" kindref="member">fd</ref>[<ref refid="sensor_8cpp_1acb559820d9ca11295b4500f179ef6392" kindref="member">i</ref>]<sp/>==<sp/><ref refid="config_define_8h_1a8538e713d830bd0982bbc0e185db5d05" kindref="member">ADC_READ_ERROR</ref>)</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="status_error_define_8h_1adf0c44f8de9b8e78b0e56caacfa1ac94abb3be0d1d4505ac1644533c725c8652d" kindref="member">errOpenAdc</ref>;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//we<sp/>read<sp/>the<sp/>values<sp/>inside<sp/>those<sp/>files</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="sensor_8cpp_1acb559820d9ca11295b4500f179ef6392" kindref="member">i</ref><sp/>=<sp/>0;<sp/><ref refid="sensor_8cpp_1acb559820d9ca11295b4500f179ef6392" kindref="member">i</ref><sp/>&lt;<sp/><ref refid="config_define_8h_1aec2426c8f9412cf841cdfd2a4b88a783" kindref="member">MAX_ADC</ref>;<sp/><ref refid="sensor_8cpp_1acb559820d9ca11295b4500f179ef6392" kindref="member">i</ref>++)<sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="sensor_8cpp_1a63a90bdf4459f383b471c5b6ddca9f4e" kindref="member">tabSensorActivated</ref>[<ref refid="sensor_8cpp_1acb559820d9ca11295b4500f179ef6392" kindref="member">i</ref>])</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sensor_8cpp_1af1a8dcdbb54fb5c1b49459cde87d1e75" kindref="member">valSensors</ref>[<ref refid="sensor_8cpp_1acb559820d9ca11295b4500f179ef6392" kindref="member">i</ref>]<sp/>=<sp/><ref refid="sensor_8cpp_1ab4df458eba25efa399c8531f2417d648" kindref="member">readAdc</ref>(<ref refid="sensor_8cpp_1a274d2ff8aab7251a1c26c919ae3694f7" kindref="member">fd</ref>[<ref refid="sensor_8cpp_1acb559820d9ca11295b4500f179ef6392" kindref="member">i</ref>]);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reset<sp/>for<sp/>next<sp/>read</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lseek(<ref refid="sensor_8cpp_1a274d2ff8aab7251a1c26c919ae3694f7" kindref="member">fd</ref>[<ref refid="sensor_8cpp_1acb559820d9ca11295b4500f179ef6392" kindref="member">i</ref>],<sp/>0,<sp/>SEEK_SET);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="sensor_8cpp_1af1a8dcdbb54fb5c1b49459cde87d1e75" kindref="member">valSensors</ref>[<ref refid="sensor_8cpp_1acb559820d9ca11295b4500f179ef6392" kindref="member">i</ref>]<sp/>==<sp/><ref refid="config_define_8h_1a8538e713d830bd0982bbc0e185db5d05" kindref="member">ADC_READ_ERROR</ref>)</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="status_error_define_8h_1adf0c44f8de9b8e78b0e56caacfa1ac94a853bb660c03c4d6dbdf70e139b46600d" kindref="member">errReadAdc</ref>;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//we<sp/>close<sp/>them<sp/>for<sp/>the<sp/>next<sp/>read</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sensor_8cpp_1abf077aeb27cbf890c5006ed980d1c6f4" kindref="member">closeAdc</ref>();</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//we<sp/>read<sp/>read<sp/>the<sp/>modbus<sp/>sensors<sp/>if<sp/>they<sp/>are<sp/>connected</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>(TARGET_SYSTEM<sp/>==<sp/>_WIN32_)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="sensor_8cpp_1acb559820d9ca11295b4500f179ef6392" kindref="member">i</ref><sp/>=<sp/>0;<sp/><ref refid="sensor_8cpp_1acb559820d9ca11295b4500f179ef6392" kindref="member">i</ref><sp/>&lt;<sp/><ref refid="config_define_8h_1aa3d1fc2927eec213e6b5f9e854c392d2" kindref="member">MAX_SENSORS</ref>;<sp/><ref refid="sensor_8cpp_1acb559820d9ca11295b4500f179ef6392" kindref="member">i</ref>++)</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="csv_8cpp_1aef9ab8154afc84c92aa1ad1875286257" kindref="member">getSensorType</ref>(<ref refid="sensor_8cpp_1acb559820d9ca11295b4500f179ef6392" kindref="member">i</ref><sp/>+<sp/>1)<sp/>==<sp/>2<sp/>&amp;&amp;<sp/><ref refid="sensor_8cpp_1a598cc7808ae2f24d9e50a96acbffe018" kindref="member">rs485Connected</ref>[<ref refid="sensor_8cpp_1acb559820d9ca11295b4500f179ef6392" kindref="member">i</ref>])</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sensor_8cpp_1a86cf672daa4e0ad11ad10efc894d19c8" kindref="member">num</ref><sp/>=<sp/>modbus_read_registers(<ref refid="sensor_8cpp_1abbcd977f5e414946647edf65cdeb74ce" kindref="member">ctx</ref>[<ref refid="sensor_8cpp_1acb559820d9ca11295b4500f179ef6392" kindref="member">i</ref>],<sp/><ref refid="csv_8cpp_1a1a782f9afa439eff3d3e807e2149de16" kindref="member">getModbusStartAddress</ref>(<ref refid="sensor_8cpp_1acb559820d9ca11295b4500f179ef6392" kindref="member">i</ref>+1),<sp/><ref refid="config_define_8h_1afa578deb5cc34a8d1a2c27d959ba68bf" kindref="member">MODBUS_NBREG</ref>,<sp/><ref refid="sensor_8cpp_1a00d425c5212b392df244df6c811bf1cd" kindref="member">modbusReg</ref>);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="sensor_8cpp_1a86cf672daa4e0ad11ad10efc894d19c8" kindref="member">num</ref><sp/>!=<sp/>1)</highlight><highlight class="comment">//<sp/>number<sp/>of<sp/>read<sp/>registers<sp/>is<sp/>not<sp/>the<sp/>one<sp/>expected</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>read:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>modbus_strerror(errno));</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Modbus<sp/>read<sp/>registers<sp/>success!<sp/>\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sensor_8cpp_1af1a8dcdbb54fb5c1b49459cde87d1e75" kindref="member">valSensors</ref>[<ref refid="sensor_8cpp_1acb559820d9ca11295b4500f179ef6392" kindref="member">i</ref>]<sp/>=<sp/><ref refid="sensor_8cpp_1a00d425c5212b392df244df6c811bf1cd" kindref="member">modbusReg</ref>[0];</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="239" refid="sensor_8cpp_1abf077aeb27cbf890c5006ed980d1c6f4" refkind="member"><highlight class="normal"><ref refid="status_error_define_8h_1adf0c44f8de9b8e78b0e56caacfa1ac94" kindref="member">statusErrDef</ref><sp/><ref refid="sensor_8cpp_1abf077aeb27cbf890c5006ed980d1c6f4" kindref="member">closeAdc</ref>()</highlight></codeline>
<codeline lineno="240"><highlight class="normal">{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="status_error_define_8h_1adf0c44f8de9b8e78b0e56caacfa1ac94" kindref="member">statusErrDef</ref><sp/>res<sp/>=<sp/><ref refid="status_error_define_8h_1adf0c44f8de9b8e78b0e56caacfa1ac94ab22416d928134d1c6c7b2e8d2c31f20b" kindref="member">noError</ref>;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="sensor_8cpp_1acb559820d9ca11295b4500f179ef6392" kindref="member">i</ref><sp/>=<sp/>0;<sp/><ref refid="sensor_8cpp_1acb559820d9ca11295b4500f179ef6392" kindref="member">i</ref><sp/>&lt;<sp/><ref refid="config_define_8h_1aec2426c8f9412cf841cdfd2a4b88a783" kindref="member">MAX_ADC</ref>;<sp/><ref refid="sensor_8cpp_1acb559820d9ca11295b4500f179ef6392" kindref="member">i</ref>++)<sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="sensor_8cpp_1a274d2ff8aab7251a1c26c919ae3694f7" kindref="member">fd</ref>[<ref refid="sensor_8cpp_1acb559820d9ca11295b4500f179ef6392" kindref="member">i</ref>]<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>close(<ref refid="sensor_8cpp_1a274d2ff8aab7251a1c26c919ae3694f7" kindref="member">fd</ref>[<ref refid="sensor_8cpp_1acb559820d9ca11295b4500f179ef6392" kindref="member">i</ref>]);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/><ref refid="status_error_define_8h_1adf0c44f8de9b8e78b0e56caacfa1ac94a282120158405e4a34ce8e365c3684fb8" kindref="member">errCloseAdc</ref>;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="257"><highlight class="normal">}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="267" refid="sensor_8cpp_1ab4df458eba25efa399c8531f2417d648" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="sensor_8cpp_1ab4df458eba25efa399c8531f2417d648" kindref="member">readAdc</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="sensor_8cpp_1a274d2ff8aab7251a1c26c919ae3694f7" kindref="member">fd</ref>)</highlight></codeline>
<codeline lineno="268"><highlight class="normal">{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buff[8];</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>buff[7]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>val<sp/>=<sp/><ref refid="config_define_8h_1a8538e713d830bd0982bbc0e185db5d05" kindref="member">ADC_READ_ERROR</ref>;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(buff,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buff));</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//read<sp/>a<sp/>specific<sp/>length<sp/>and<sp/>convert<sp/>it<sp/>to<sp/>an<sp/>integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(read(<ref refid="sensor_8cpp_1a274d2ff8aab7251a1c26c919ae3694f7" kindref="member">fd</ref>,<sp/>buff,<sp/>8)<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror(</highlight><highlight class="stringliteral">&quot;read()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>atoi(buff);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val;</highlight></codeline>
<codeline lineno="283"><highlight class="normal">}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="293" refid="sensor_8cpp_1aaee06476c9ddb6ab8457694fdd20cccc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="sensor_8cpp_1aaee06476c9ddb6ab8457694fdd20cccc" kindref="member">openAdc</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>adc)</highlight></codeline>
<codeline lineno="294"><highlight class="normal">{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>path[128];</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//a<sp/>specific<sp/>channel<sp/>sysfs<sp/>file<sp/>path</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(path,<sp/></highlight><highlight class="stringliteral">&quot;%sin_voltage%d_raw&quot;</highlight><highlight class="normal">,<sp/><ref refid="config_define_8h_1a2e79cb96de76e27ba54960b579c9f530" kindref="member">IIOSYSPATH</ref>,<sp/>adc);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="sensor_8cpp_1a274d2ff8aab7251a1c26c919ae3694f7" kindref="member">fd</ref><sp/>=<sp/>open(path,<sp/>O_RDONLY);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="sensor_8cpp_1a274d2ff8aab7251a1c26c919ae3694f7" kindref="member">fd</ref><sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>perror(</highlight><highlight class="stringliteral">&quot;open()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/>path);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="config_define_8h_1a8538e713d830bd0982bbc0e185db5d05" kindref="member">ADC_READ_ERROR</ref>;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="sensor_8cpp_1a274d2ff8aab7251a1c26c919ae3694f7" kindref="member">fd</ref>;</highlight></codeline>
<codeline lineno="307"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/Users/Squaria/Documents/openPOWERLINK_V2_CAC/apps/CAC_CN/src/sensor.cpp"/>
  </compounddef>
</doxygen>
